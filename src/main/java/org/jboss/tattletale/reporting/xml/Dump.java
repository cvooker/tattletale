/*
 * JBoss, Home of Professional Open Source.
 * Copyright 2009, Red Hat Middleware LLC, and individual contributors
 * as indicated by the @author tags. See the copyright.txt file in the
 * distribution for a full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.jboss.tattletale.reporting.xml;

import org.jboss.tattletale.Version;
import org.jboss.tattletale.reporting.interfaces.Report;
import org.jboss.tattletale.reporting.interfaces.ReportInterface;
import org.jboss.tattletale.reporting.abstracts.DumpAbstract;
import org.jboss.tattletale.reporting.common.*;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.SortedSet;

/**
 * Dump
 *
 * @author Jesper Pedersen <jesper.pedersen@jboss.org>
 * @author Jay Balunas <jbalunas@jboss.org>
 */
public class Dump extends DumpAbstract
{
   /** New line character */
   private static final String NEW_LINE = System.getProperty("line.separator");

   /**
    * Generate index.html
    *
    * @param dependenciesReports The dependencies reports
    * @param generalReports      The general reports
    * @param archiveReports      The archive reports
    * @param customReports       The custom reports as defined by the user in jboss-tattletale.properties
    * @param outputDir           where the reports go
    */
   public static void generateIndex(SortedSet<Report> dependenciesReports,
           SortedSet<Report> generalReports,
           SortedSet<Report> archiveReports,
           SortedSet<Report> customReports,
           String outputDir)
   	{
	   try
	   {
		   FileWriter fw = new FileWriter(outputDir + "index.xml");
		   BufferedWriter bw = new BufferedWriter(fw, 8192);

		   bw.write("<?xml version=\"1.0\" encoding=\"utf-8\"?> "+ newLine());
		   //bw.write("<?xml-stylesheet type=\"text/css\" href=\"styl.css\"?>" + newLine());
		   bw.write(" <!---  to je snad komen -->      ");
		   bw.write("<main>" + newLine());
		   bw.write("<info>" + newLine());
		   bw.write("  <title>" + Version.FULL_VERSION + ": Index</title>" + newLine());

		   bw.write("</info>" + newLine());
		   bw.write("<reporting>" + newLine());
		   bw.write(newLine());

		   bw.write("<Dependencies>" + newLine());
		   generateReportItems(bw, dependenciesReports, "Dependencies", false);
		   bw.write("</Dependencies>" + newLine());

		   bw.write("<Reports>" + newLine());
		   generateReportItems(bw, generalReports, "Reports", false);
		   bw.write("</Reports>" + newLine());

		   bw.write("<Archives>" + newLine());
		   generateReportItems(bw, archiveReports, "Archives", true);
		   bw.write("</Archives>" + newLine());

		   bw.write("<Customreports>" + newLine());
		   generateReportItems(bw, customReports, "Custom reports", false);
		   bw.write("</Customreports>" + newLine());

		   bw.write(newLine());

		   bw.write("<footer>" + newLine());
		   
		   bw.write("Generated by: http://www.jboss.org/tattletale");				   
		   
		   bw.write("</footer>" + newLine());
		   bw.write(newLine());
		   bw.write("</reporting>" + newLine());
		   bw.write("</main>" + newLine());

		   bw.flush();
		   bw.close();
	   }
	   catch (Exception e)
	   {
		   System.err.println("GenerateIndex: " + e.getMessage());
		   e.printStackTrace(System.err);
	   }
   }

   /**
    * Simple static method to return the System property of line separator.
    *
    * @return - the line separator from System properties.
    */
   public static String newLine()
   {
      return NEW_LINE;
   }

   private static void generateReportItems(BufferedWriter bw, SortedSet<Report> reports,
                                           String heading, boolean useReportName) throws IOException
   {

      if (reports != null && reports.size() > 0)
      {
         bw.write("<h2>" + heading + "</h2>" + newLine());
         bw.write("<elements>" + newLine());

         String fileBase = "index";
         for (Report r : reports)
         {
            bw.write("<element>");
            if (useReportName)
            {
               fileBase = r.getName();
            }
            bw.write( r.getDirectory() + "/" + fileBase + ".xml  " + r.getName()+" ");
           /* bw.write("<font ");
            bw.write("font-color=\"" + ReportStatus.getStatusColor(r.getStatus()) + "\"");
            bw.write(">");*/

            bw.write(ReportSeverity.getSeverityString(r.getSeverity()));
            bw.write("("+ getIndexSize(r) + ")</element>" + newLine());
            
         }

         bw.write("</elements>" + newLine());
      }
   }

   private static String getIndexSize(Report r)
   {
	   File indexFile = new File(r.getOutputDirectory().getAbsolutePath() + File.separator + r.getIndexName());
	   return ((indexFile.length() / 1024) + 1) + "KB";
   }

	@Override
	public void generate(SortedSet<Report> dependenciesReports,
	           SortedSet<Report> generalReports,
	           SortedSet<Report> archiveReports,
	           SortedSet<Report> customReports,
	           String outputDir)
	{
		generateIndex(dependenciesReports, generalReports, archiveReports, customReports, outputDir);
		
	}
}
